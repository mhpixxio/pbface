// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: face.proto

package pbface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextServiceClient is the client API for TextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextServiceClient interface {
	TextFunc(ctx context.Context, in *Textmessage, opts ...grpc.CallOption) (*Textmessage, error)
}

type textServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextServiceClient(cc grpc.ClientConnInterface) TextServiceClient {
	return &textServiceClient{cc}
}

func (c *textServiceClient) TextFunc(ctx context.Context, in *Textmessage, opts ...grpc.CallOption) (*Textmessage, error) {
	out := new(Textmessage)
	err := c.cc.Invoke(ctx, "/TextService/TextFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextServiceServer is the server API for TextService service.
// All implementations must embed UnimplementedTextServiceServer
// for forward compatibility
type TextServiceServer interface {
	TextFunc(context.Context, *Textmessage) (*Textmessage, error)
	mustEmbedUnimplementedTextServiceServer()
}

// UnimplementedTextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextServiceServer struct {
}

func (UnimplementedTextServiceServer) TextFunc(context.Context, *Textmessage) (*Textmessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextFunc not implemented")
}
func (UnimplementedTextServiceServer) mustEmbedUnimplementedTextServiceServer() {}

// UnsafeTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextServiceServer will
// result in compilation errors.
type UnsafeTextServiceServer interface {
	mustEmbedUnimplementedTextServiceServer()
}

func RegisterTextServiceServer(s grpc.ServiceRegistrar, srv TextServiceServer) {
	s.RegisterService(&TextService_ServiceDesc, srv)
}

func _TextService_TextFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Textmessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).TextFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TextService/TextFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).TextFunc(ctx, req.(*Textmessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TextService_ServiceDesc is the grpc.ServiceDesc for TextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TextService",
	HandlerType: (*TextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextFunc",
			Handler:    _TextService_TextFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}

// BytesServiceClient is the client API for BytesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BytesServiceClient interface {
	BytesFunc(ctx context.Context, in *Bytesmessage, opts ...grpc.CallOption) (*Bytesmessage, error)
}

type bytesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBytesServiceClient(cc grpc.ClientConnInterface) BytesServiceClient {
	return &bytesServiceClient{cc}
}

func (c *bytesServiceClient) BytesFunc(ctx context.Context, in *Bytesmessage, opts ...grpc.CallOption) (*Bytesmessage, error) {
	out := new(Bytesmessage)
	err := c.cc.Invoke(ctx, "/BytesService/BytesFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BytesServiceServer is the server API for BytesService service.
// All implementations must embed UnimplementedBytesServiceServer
// for forward compatibility
type BytesServiceServer interface {
	BytesFunc(context.Context, *Bytesmessage) (*Bytesmessage, error)
	mustEmbedUnimplementedBytesServiceServer()
}

// UnimplementedBytesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBytesServiceServer struct {
}

func (UnimplementedBytesServiceServer) BytesFunc(context.Context, *Bytesmessage) (*Bytesmessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesFunc not implemented")
}
func (UnimplementedBytesServiceServer) mustEmbedUnimplementedBytesServiceServer() {}

// UnsafeBytesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BytesServiceServer will
// result in compilation errors.
type UnsafeBytesServiceServer interface {
	mustEmbedUnimplementedBytesServiceServer()
}

func RegisterBytesServiceServer(s grpc.ServiceRegistrar, srv BytesServiceServer) {
	s.RegisterService(&BytesService_ServiceDesc, srv)
}

func _BytesService_BytesFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytesmessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BytesServiceServer).BytesFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BytesService/BytesFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BytesServiceServer).BytesFunc(ctx, req.(*Bytesmessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BytesService_ServiceDesc is the grpc.ServiceDesc for BytesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BytesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BytesService",
	HandlerType: (*BytesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BytesFunc",
			Handler:    _BytesService_BytesFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}

// FaceServiceClient is the client API for FaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceServiceClient interface {
	FaceFunc(ctx context.Context, in *FaceRequest, opts ...grpc.CallOption) (*FaceResponse, error)
}

type faceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceServiceClient(cc grpc.ClientConnInterface) FaceServiceClient {
	return &faceServiceClient{cc}
}

func (c *faceServiceClient) FaceFunc(ctx context.Context, in *FaceRequest, opts ...grpc.CallOption) (*FaceResponse, error) {
	out := new(FaceResponse)
	err := c.cc.Invoke(ctx, "/FaceService/FaceFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceServiceServer is the server API for FaceService service.
// All implementations must embed UnimplementedFaceServiceServer
// for forward compatibility
type FaceServiceServer interface {
	FaceFunc(context.Context, *FaceRequest) (*FaceResponse, error)
	mustEmbedUnimplementedFaceServiceServer()
}

// UnimplementedFaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFaceServiceServer struct {
}

func (UnimplementedFaceServiceServer) FaceFunc(context.Context, *FaceRequest) (*FaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaceFunc not implemented")
}
func (UnimplementedFaceServiceServer) mustEmbedUnimplementedFaceServiceServer() {}

// UnsafeFaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceServiceServer will
// result in compilation errors.
type UnsafeFaceServiceServer interface {
	mustEmbedUnimplementedFaceServiceServer()
}

func RegisterFaceServiceServer(s grpc.ServiceRegistrar, srv FaceServiceServer) {
	s.RegisterService(&FaceService_ServiceDesc, srv)
}

func _FaceService_FaceFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).FaceFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FaceService/FaceFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).FaceFunc(ctx, req.(*FaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaceService_ServiceDesc is the grpc.ServiceDesc for FaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FaceService",
	HandlerType: (*FaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FaceFunc",
			Handler:    _FaceService_FaceFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}
